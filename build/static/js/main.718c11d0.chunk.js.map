{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/Container/Container.js","components/Card/Card.js","components/Game/Game.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","props","className","id","score","bestScore","Footer","href","Container","children","Card","role","onClick","handleClick","style","backgroundImage","image","Game","state","data","handleCorrectGuess","newData","newScore","newBestScore","setState","shuffleDeck","handleIncorrectGuess","resetGame","handleCardClick","correctGuess","map","item","newitem","clicked","i","length","j","Math","floor","random","temp","this","key","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.718c11d0.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = props => (\n    <div className='header'>\n        <h1>Memory Game</h1>\n        <p id=\"instructions\">Click on an image to earn points, but donâ€™t click on any more than once.</p>\n        <ul id=\"scoreboard\">\n            <li>Current Score: {props.score}</li>\n            <li>Best Score: {props.bestScore}</li>\n        </ul>\n    </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n    <footer>\n        <a href='https://github.com/gbremble/react-memory-game'>Check out the code on GitHub</a>\n    </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport './Container.css';\n\nconst Container = props => <main className='container'>{props.children}</main>;\n\nexport default Container;\n","import React from 'react';\nimport './Card.css';\n\nconst Card = props => (\n    <div\n        role='img'\n        onClick={() => props.handleClick(props.id)}\n        style={{ backgroundImage: `url('${props.image}')` }}\n        className='card'\n    />\n);\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport Container from '../Container';\nimport Card from '../Card/Card';\nimport data from '../../cards.json'\n\nclass Game extends Component {\n    state = {\n        data,\n        score: 0,\n        bestScore: 0,\n    };\n\n    componentDidMount() {\n        this.setState({ data: this.shuffleDeck(this.state.data) });\n    }\n\n    handleCorrectGuess = newData => {\n        const { bestScore, score } = this.state;\n        const newScore = score + 1;\n        const newBestScore = newScore > bestScore ? newScore : bestScore;\n        this.setState({\n            data: this.shuffleDeck(newData),\n            score: newScore,\n            bestScore: newBestScore,\n        });\n    }\n\n    handleIncorrectGuess = data => {\n        this.setState({\n            data: this.resetGame(data),\n            score: 0,\n        });\n    }\n\n    handleCardClick = id => {\n        let correctGuess = false;\n\n        const newData = this.state.data.map(item => {\n            const newitem = { ...item };\n            if (newitem.id === id) {\n                if (!newitem.clicked) {\n                    newitem.clicked = true;\n                    correctGuess = true;\n                }\n            }\n            return newitem;\n        });\n        correctGuess ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n    };\n\n    resetGame = data => {\n        const resetGame = data.map(item => ({ ...item, clicked: false }));\n        return this.shuffleDeck(resetGame);\n    }\n\n    shuffleDeck= data => {\n        let i = data.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = data[i];\n            data[i] = data[j];\n            data[j] = temp;\n            i--;\n        }\n        return data;\n    };\n\n    render() {\n        return(\n            <div>\n                <Header score={this.state.score} bestScore={this.state.bestScore} />\n                <Container>\n                    {this.state.data.map(item => (\n                        <Card\n                            key={item.id}\n                            id={item.id}\n                            handleClick={this.handleCardClick}\n                            image={item.image}\n                        />\n                    ))}\n                </Container>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './components/Game'\n\n// App.js imports the game component\nconst App = () => <Game />;\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n// entry point is index.js, which renders App.js in the #root div\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}