{"ast":null,"code":"import _objectSpread from \"/Users/billcoury/Desktop/click/react-memory-game/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/billcoury/Desktop/click/react-memory-game/src/components/Game/Game.js\";\nimport React, { Component } from 'react';\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport Container from '../Container';\nimport Card from '../Card/Card';\nimport data from '../../cards.json';\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data,\n      score: 0,\n      bestScore: 0\n    };\n\n    this.handleCorrectGuess = newData => {\n      const _this$state = this.state,\n            bestScore = _this$state.bestScore,\n            score = _this$state.score;\n      const newScore = score + 1;\n      const newBestScore = newScore > bestScore ? newScore : bestScore;\n      this.setState({\n        data: this.shuffleDeck(newData),\n        score: newScore,\n        bestScore: newBestScore\n      });\n    };\n\n    this.handleIncorrectGuess = data => {\n      this.setState({\n        data: this.resetGame(data),\n        score: 0\n      });\n    };\n\n    this.handleCardClick = id => {\n      let correctGuess = false;\n      const newData = this.state.data.map(item => {\n        const newitem = _objectSpread({}, item);\n\n        if (newitem.id === id) {\n          if (!newitem.clicked) {\n            newitem.clicked = true;\n            correctGuess = true;\n          }\n        }\n\n        return newitem;\n      });\n      correctGuess ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n    };\n\n    this.resetGame = data => {\n      const resetGame = data.map(item => _objectSpread({}, item, {\n        clicked: false\n      }));\n      return this.shuffleDeck(resetGame);\n    };\n\n    this.shuffleDeck = data => {\n      let i = data.length - 1;\n\n      while (i > 0) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n        i--;\n      }\n\n      return data;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: this.shuffleDeck(this.state.data)\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Header, {\n      score: this.state.score,\n      bestScore: this.state.bestScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.data.map(item => React.createElement(Card, {\n      key: item.id,\n      id: item.id,\n      handleClick: this.handleCardClick,\n      image: item.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/billcoury/Desktop/click/react-memory-game/src/components/Game/Game.js"],"names":["React","Component","Header","Footer","Container","Card","data","Game","state","score","bestScore","handleCorrectGuess","newData","newScore","newBestScore","setState","shuffleDeck","handleIncorrectGuess","resetGame","handleCardClick","id","correctGuess","map","item","newitem","clicked","i","length","j","Math","floor","random","temp","componentDidMount","render","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport Container from '../Container';\nimport Card from '../Card/Card';\nimport data from '../../cards.json'\n\nclass Game extends Component {\n    state = {\n        data,\n        score: 0,\n        bestScore: 0,\n    };\n\n    componentDidMount() {\n        this.setState({ data: this.shuffleDeck(this.state.data) });\n    }\n\n    handleCorrectGuess = newData => {\n        const { bestScore, score } = this.state;\n        const newScore = score + 1;\n        const newBestScore = newScore > bestScore ? newScore : bestScore;\n        this.setState({\n            data: this.shuffleDeck(newData),\n            score: newScore,\n            bestScore: newBestScore,\n        });\n    }\n\n    handleIncorrectGuess = data => {\n        this.setState({\n            data: this.resetGame(data),\n            score: 0,\n        });\n    }\n\n    handleCardClick = id => {\n        let correctGuess = false;\n\n        const newData = this.state.data.map(item => {\n            const newitem = { ...item };\n            if (newitem.id === id) {\n                if (!newitem.clicked) {\n                    newitem.clicked = true;\n                    correctGuess = true;\n                }\n            }\n            return newitem;\n        });\n        correctGuess ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n    };\n\n    resetGame = data => {\n        const resetGame = data.map(item => ({ ...item, clicked: false }));\n        return this.shuffleDeck(resetGame);\n    }\n\n    shuffleDeck= data => {\n        let i = data.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = data[i];\n            data[i] = data[j];\n            data[j] = temp;\n            i--;\n        }\n        return data;\n    };\n\n    render() {\n        return(\n            <div>\n                <Header score={this.state.score} bestScore={this.state.bestScore} />\n                <Container>\n                    {this.state.data.map(item => (\n                        <Card\n                            key={item.id}\n                            id={item.id}\n                            handleClick={this.handleCardClick}\n                            image={item.image}\n                        />\n                    ))}\n                </Container>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}